{"version":3,"sources":["components/Form/Form.js","components/Form/Form.module.scss","components/Form/Input.js","components/Form/Input.module.scss","hooks/use-form.js","pages/Login.module.scss","pages/Login.js"],"names":["Form","props","className","classes","children","module","exports","Input","inputvalid","istouched","isvalid","JSON","parse","isValid","elementconfig","htmlFor","id","label","border","Select","inputGroup","checked","Radio","display","invalid","useForm","inputType","useState","inputData","dispatch","setIsValid","errorMessage","setErrorMessage","touched","setTouched","regex","inputChangeHandler","event","target","value","test","length","inputBlurHandler","Login","confirmRegistration","history","useHistory","isRegistered","setIsRegistered","useDispatch","errMessage","SetErrorMessage","isLoading","setLoading","emailHandler","emailBlur","emailData","emailValid","emailErrorMessage","emailTouched","UserNameHandler","userNameBlur","userNameData","userNameValid","userNameErrorMessage","userTouched","passwordhandler","passwordBlur","passwordData","passwordValid","passwordErrorMessage","passwordTouched","switchLogin","submitFormHandler","a","axios","post","email","password","returnSecureToken","Headers","then","res","expirationTime","Date","getTime","data","expiresIn","loginData","token","idToken","toISOString","authActions","logIn","replace","pathname","catch","err","process","username","console","log","style","textAlign","color","onClick","registerLogin","onSubmit","preventDefault","type","toString","onBlur","onChange","to","help"],"mappings":"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","file":"static/js/7.fa560847.chunk.js","sourcesContent":["import React from 'react'\r\nimport classes from './Form.module.scss'\r\nconst Form = props => {\r\n    return (\r\n        <div className={`${classes.Form} ${props.className}`} {...props}>\r\n           {props.children} \r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Form\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Form\":\"Form_Form__1lAKg\"};","import React, { Fragment } from 'react'\r\nimport classes from './Input.module.scss'\r\n\r\nconst Input = props => {\r\n\r\nlet inputvalid = ''\r\nlet istouched = '' \r\nlet isvalid = '' \r\n\r\nif(props.istouched){\r\nistouched = JSON.parse(props.istouched)\r\n}\r\n\r\nif(props.isvalid){\r\n    isvalid = JSON.parse(props.isvalid)\r\n    }\r\n    \r\nif(istouched && isvalid){\r\n    inputvalid = classes.isValid\r\n}\r\n\r\nswitch (props.elementconfig) {\r\n    case 'text':\r\n        return(\r\n            \r\n\r\n\r\n<Fragment>\r\n                <label htmlFor={props.id}>{props.label}</label>\r\n                <input\r\n            {...props}\r\n            className={`${classes.Input} ${props.className } ${props.border ? classes[props.border] : null}`}\r\n            \r\n            />\r\n            </Fragment>\r\n\r\n        )\r\n     \r\n        case 'select':\r\n        return(\r\n            <Fragment>\r\n                <label htmlFor={props.id}>{props.label}</label>\r\n            <select \r\n            \r\n            {...props}\r\n            \r\n            className={`${classes.Select} ${props.className}`}>\r\n                {props.children}\r\n                   \r\n            </select>\r\n            </Fragment>\r\n           \r\n        )\r\n        case 'radio':\r\n            return(\r\n\r\n\r\n               <div className={classes.inputGroup}>\r\n<label htmlFor={props.id}>{props.label}</label>\r\n         \r\n         <input \r\n         checked={props.checked}\r\n     {...props}\r\n     className={`${classes.Radio}  ${props.className } ${props.border ? classes[props.border] : null}`}\r\n     \r\n     />\r\n               </div>\r\n                \r\n            \r\n\r\n\r\n\r\n            )\r\n\r\n    default:\r\n        return (\r\n            <Fragment>\r\n            <label htmlFor={props.id}>{props.label}</label>\r\n     \r\n            <input\r\n            \r\n        {...props}\r\n        className={`${classes.Input} ${props.className}  ${classes[props.display]} ${!isvalid && classes.invalid} ${ inputvalid}`}\r\n        \r\n        />\r\n        </Fragment>\r\n        )   \r\n            \r\n        }\r\n   \r\n}\r\n\r\nexport default Input\r\n","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Select\":\"Input_Select__JLRNQ\",\"Radio\":\"Input_Radio__lNqkj\",\"invalid\":\"Input_invalid__-pKCl\",\"isValid\":\"Input_isValid__2kmUt\",\"block\":\"Input_block__hA0V9\",\"gray\":\"Input_gray__2h8xF\",\"none\":\"Input_none__2hCxO\",\"inputGroup\":\"Input_inputGroup__3SBRM\"};","import  { useState } from \"react\"\r\n\r\n\r\n\r\nexport const useForm = (inputType) => {\r\n\r\n    const [inputData, dispatch] = useState('')\r\n    const [isValid, setIsValid] = useState(true)\r\n    const [errorMessage, setErrorMessage] = useState('')\r\n    const [touched, setTouched] = useState(false)\r\n\r\n    let regex =  /^\\w+([\\.-]?\\w+)*@\\w+([\\.-]?\\w+)*(\\.\\w{2,3})+$/;\r\n\r\n    const inputBlurHandler = (event) => {\r\n        \r\n        switch (inputType) {\r\n            case 'email':\r\n                if( !regex.test(event.target.value)){\r\n                    setIsValid(false)\r\n                    setErrorMessage('Please enter a valid email')\r\n                    \r\n                }\r\n                break;\r\n                case 'username':\r\n                    if(event.target.value.length < 1){\r\n                        setIsValid(false)\r\n                    setErrorMessage('Username cannot be Empty')\r\n                    }\r\n                    break;\r\n                    case 'password':\r\n                    if(event.target.value.length < 6){\r\n                        setIsValid(false)\r\n                    setErrorMessage('Password must be longer than 6 characters')\r\n                    }\r\n                    break;\r\n            default:\r\n                break;\r\n        }\r\n\r\n    }\r\n\r\nconst inputChangeHandler = (event) => {\r\n    setTouched(true)\r\n    dispatch(event.target.value)\r\n\r\n    switch (inputType) {\r\n        case 'email':\r\n            if( touched && regex.test(event.target.value)){\r\n                setIsValid(true)\r\n                setErrorMessage('')   \r\n            }  \r\n            break;\r\n            case 'username':\r\n                if( touched && event.target.value.length > 1){\r\n                    setIsValid(true)\r\n                    setErrorMessage('')\r\n                }\r\n                break;\r\n                case 'password':\r\n                if(touched && event.target.value.length >=6 ){\r\n                    setIsValid(true)\r\n                    setErrorMessage('')\r\n                }\r\n                break;\r\n        default:\r\n            break;\r\n    }\r\n  \r\n}\r\n\r\n    return {\r\ninputChangeHandler,\r\ninputData,\r\nisValid,\r\ninputBlurHandler,\r\nerrorMessage,\r\ntouched\r\n    }\r\n}","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Login\":\"Login_Login__1Bn12\",\"help\":\"Login_help__1EGul\",\"registerLogin\":\"Login_registerLogin__bD7SC\",\"errorMessage\":\"Login_errorMessage__1qdmZ\"};","import React, {useState } from 'react'\nimport Form from '../components/Form/Form'\nimport Input from '../components/Form/Input'\nimport classes from './Login.module.scss'\nimport Button from '../components/UI/Button'\nimport { useForm } from '../hooks/use-form'\nimport { Link, useHistory } from 'react-router-dom'\nimport { useDispatch} from 'react-redux'\nimport { authActions } from '../store/authSlice'\nimport axios from 'axios'\n\nconst Login = () => {\n    const history = useHistory()\n\n    const [isRegistered, setIsRegistered] = useState(true)\n    const dispatch = useDispatch()\nconst [errMessage, SetErrorMessage] = useState('')\n    const [isLoading, setLoading] = useState(false)\n   \n    \n\n    const {inputChangeHandler: emailHandler, inputBlurHandler: emailBlur, \n        inputData: emailData, isValid: emailValid, errorMessage: emailErrorMessage, touched: emailTouched} = useForm('email')\n\n        const {inputChangeHandler: UserNameHandler, inputBlurHandler: userNameBlur, \n            inputData: userNameData, isValid: userNameValid, errorMessage: userNameErrorMessage, touched: userTouched} = useForm('username')\n\n            const {inputChangeHandler: passwordhandler, inputBlurHandler: passwordBlur, \n                inputData: passwordData, isValid: passwordValid, errorMessage: passwordErrorMessage, touched: passwordTouched} = useForm('password')\n\n    const switchLogin = () => {\nsetIsRegistered(isRegistered => isRegistered = !isRegistered)\nSetErrorMessage('')\n    }\n\n    const submit = (event) => {\n        event.preventDefault()\n    }\n\n    const submitFormHandler = async () => {\n\n        if(isRegistered){\n\n            if(emailValid && emailTouched  && passwordTouched && passwordValid){\n               setLoading(true) \n       await axios.post('https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=AIzaSyCzZIZNcakxDaNMSHEHJ56wATc9jPh1-n8',{ \n           \n                    email: emailData,\n                    password: passwordData,\n                    returnSecureToken: true\n                ,\n                Headers:{\n                    'Content-Type': 'application/json'\n                }\n    \n            })\n            .then(res => {\n                setLoading(false)\n        \n                const expirationTime = new Date((new Date().getTime() + (+res.data.expiresIn * 1000)))\n                SetErrorMessage('')\n                const loginData = {\n                    token: res.data.idToken,\n                    expirationTime: expirationTime.toISOString()\n                }\n                dispatch(authActions.logIn(loginData))\n                history.replace({\n                    pathname: '/profile'\n                })\n\n            })\n            .catch(err => {\n                setLoading(false)\n                SetErrorMessage('Invalid username or password')\n            })\n            }\n\n        }\n\n\n\n        else{\n           const key = process.env.REACT_APP_FIREBASEE_KEY\n            if(emailValid && emailTouched && userTouched && userNameValid && passwordTouched && passwordValid){\n           \n                setLoading(true) \n                await axios.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${key}`,{ \n                    \n                             email: emailData,\n                             username: userNameData,\n                             password: passwordData,\n                             returnSecureToken: true\n                         ,\n                         Headers:{\n                             'Content-Type': 'application/json'\n                         }\n             \n                     })\n                     .then(res => {\n                         setLoading(false)\n                         SetErrorMessage('')\n                         console.log(res.data)\n                      \n                         const expirationTime = new Date((new Date().getTime() + (+res.data.expiresIn * 1000)))\n                         SetErrorMessage('')\n                         const loginData = {\n                             token: res.data.idToken,\n                             expirationTime: expirationTime.toISOString()\n                         }\n                         dispatch(authActions.logIn(loginData))\n                         history.replace({\n                             pathname: '/profile'\n                         })\n                     })\n                     .catch(err => {\n                         setLoading(false)\n                         SetErrorMessage('User already exists, please log in ')\n                     })\n\n            }\n            else{\n                console.log('Check register Form Field')\n            }\n        }\n\n    }\n    let confirmRegistration;\n\n    if(isLoading){\nconfirmRegistration = <p style={{textAlign: 'start', color: 'grey'}}>Loading...</p>\n    }\n    if(errMessage.length > 0){\n        confirmRegistration = <p style={{textAlign: 'start', color: 'red'}}>{errMessage}</p>\n            }\n    \n    return (\n        <div className={classes.Login}>\n            <h2>{isRegistered ? 'Log In': 'Sign up for a free account'}</h2>\n            {isRegistered?  \n            <p>Don't have an account? <span onClick={switchLogin} className={classes.registerLogin}> click here to register</span></p> :\n            <p>Already registered ? <span onClick={switchLogin} className={classes.registerLogin}> click here to login</span></p> \n            }\n           \n            <Form onSubmit={submit}>\n            <Input type='email' istouched={emailTouched.toString()}  isvalid={emailValid.toString()} onBlur={emailBlur} onChange={emailHandler} value={emailData} display='block' label='Email' />\n            <p className={classes.errorMessage}>{emailErrorMessage}</p>\n\n            {!isRegistered && \n            <Input istouched={userTouched.toString()}  isvalid={userNameValid.toString()} onBlur={userNameBlur} onChange={UserNameHandler} value={userNameData} display='block' label='Username' />\n            }\n        <p className={classes.errorMessage}>{userNameErrorMessage}</p>\n\n\n            <Input type='password' istouched={passwordTouched.toString()} isvalid={passwordValid.toString()} onBlur={passwordBlur} onChange={passwordhandler} value={passwordData} display='block' label='Password'/>\n           <p className={classes.errorMessage}>{passwordErrorMessage}</p>\n\n\n\n\n\n            {isRegistered && <Link to='/resetPassword'  className={classes.registerLogin}> Forgot Password?</Link>}\n\n\n            <Button onClick={submitFormHandler} className='fullWidth'>{isRegistered ? 'LOGIN' : 'REGISTER NOW'}</Button>\n            </Form>\n            {confirmRegistration}\n            <p className={classes.help}>Trouble logging or registering? Make sure browser cookies and JavaScript are enabled.</p>\n            \n        </div>\n    )\n}\n\nexport default Login\n"],"sourceRoot":""}